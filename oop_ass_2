sppu code 2
#include <iostream>
#include <string>
using namespace std;

class student
{
public:
string name;
int rollno;
string bldgroup;
string dob;
string clas; 
string div;
long int tel;
string drliv;
static int counter;

student()
{
rollno=0;
counter++;
}
student(int rollno)
{
this->rollno=rollno;
counter++;
}
student(const student &obj)
{
rollno =obj.rollno;
name=obj.name;
bldgroup= obj.bldgroup;
dob=obj.dob;
clas =obj.clas; 
div= obj.div; 
tel= obj.tel;
drliv =obj.drliv;
counter++;
}
~student() {
cout << "Deleting object" << endl;
counter--;
}
inline static void dis_counter() {
cout << "Number of objects in the program: " << counter << endl;
}
void addData();
friend void display(const student &obj);
};
void student::addData() {
cout << "Enter rollno: ";
cin >> rollno;
cout << "Enter name: ";
cin.ignore(); // Ignore any leftover newline characters.
getline(cin, name);
cout << "Enter class: ";
cin >> clas;
cout << "Enter division: ";
cin >> div;
cout << "Enter telephone: ";
cin >> tel;
cout << "Enter Blood group: ";
cin >> bldgroup;
cout << "Enter Driving license no: ";
cin >> drliv;
}

void display(const student &obj) 
{
cout << "\t" << obj.rollno;
cout << "\t" << obj.name;
cout << "\t" << obj.clas;
cout << "\t" << obj.div;
cout << "\t" << obj.tel;
cout << "\t" << obj.bldgroup;
cout << "\t" << obj.drliv<<"\n";
}

int student::counter=0;
int main()
{
student s1;
student s2(101);
s2.addData();
student s3(s2); // Copy constructor
cout << "\tRollno\tName\tClass\tDiv\tTelephone\tBlood Group\tDrivinglieLicense No\n"; 
    display(s2);

student::dis_counter();
int n, i;
student *s[50];

cout << "Enter how many students you want in a class (max 50): "; 
cin >> n;

if(n>50){
    cout<<"maximun number allow is 50 setting to 50."<<endl;
    n=50;
}
for (i=0 ; i<n ;i++){
s[i]=new student();
}

for(i=0 ; i<n ;i++){
    s[i]->addData();
}
cout << "\tRollno\tName\tClass\tDiv\tTelephone\tBlood Group\tDriving License No\n";
for (i=0; i < n; i++)
{
display(*s[i]);
}

student::dis_counter();
// Free allocated memory for (10; i < n; i++) { delete s[i]; }
for(i=0 ; i<n ;i++){
  delete s[i];
}
 student::dis_counter();
return 0;
}
