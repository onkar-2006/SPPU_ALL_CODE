#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

// Define a structure for Item records
struct Item {
    string itemCode;
    string name;
    double cost;
    int quantity;

    // Constructor for easy initialization
    Item(string code, string n, double c, int q) 
        : itemCode(code), name(n), cost(c), quantity(q) {}
};

// Function to display the item records
void displayItems(const vector<Item>& items) {
    cout << "Item Code\tName\t\tCost\tQuantity\n";
    cout << "---------------------------------------------\n";
    for (const auto& item : items) {
        cout << item.itemCode << "\t\t" << item.name << "\t" 
             << item.cost << "\t" << item.quantity << endl;
    }
}

// Comparator for sorting items by name
bool compareByName(const Item& a, const Item& b) {
    return a.name < b.name;
}

// Function to search for an item by code
bool searchItemByCode(const vector<Item>& items, const string& code, Item& foundItem) {
    auto it = find_if(items.begin(), items.end(), [&code](const Item& item) {
        return item.itemCode == code;
    });
    if (it != items.end()) {
        foundItem = *it;
        return true;
    }
    return false;
}

int main() {
    // Create a vector to store item records
    vector<Item> items;

    // Sample item records
    items.emplace_back("A101", "Apple", 0.5, 100);
    items.emplace_back("B202", "Banana", 0.3, 150);
    items.emplace_back("O303", "Orange", 0.4, 200);
    items.emplace_back("G404", "Grapes", 2.0, 50);
    items.emplace_back("M505", "Mango", 1.5, 80);

    // Display items before sorting
    cout << "Items before sorting:\n";
    displayItems(items);

    // Sort items by name
    sort(items.begin(), items.end(), compareByName);

    // Display items after sorting
    cout << "\nItems after sorting by name:\n";
    displayItems(items);

    // Search for an item
    string searchCode;
    cout << "\nEnter the item code to search: ";
    cin >> searchCode;

    Item foundItem("", "", 0.0, 0);
    if (searchItemByCode(items, searchCode, foundItem)) {
        cout << "Item found: " << foundItem.name << " with cost: " 
             << foundItem.cost << " and quantity: " << foundItem.quantity << endl;
    } else {
        cout << "Item not found." << endl;
    }

    return 0;
}
